{
  "articles": [
    {
      "path": "assignments.html",
      "title": "Assignments",
      "author": [],
      "contents": "\n\nContents\nAssignment materials and dates\nAssignment expectations and grading\n\n\n\nTO UPDATE THIS PAGE: Open and edit the assignments.Rmd file, in the project root, to delete this placeholder text and customize with your own!\n\nAssignment materials and dates\nAssignment materials\nAssigned\nDue date\nA link to the repo\n2021-01-01\n2021-01-08\nA link to the repo\n2021-01-15\n2021-01-23\nA link to the repo\n2021-02-01\n2021-02-09\nA link to the repo\n2021-02-14\n2021-02-23\nAssignment expectations and grading\nThis might also go on the home page & in syllabus\nOr could reinforce here\n\n\n\n\n",
      "last_modified": "2021-08-02T22:35:35-07:00"
    },
    {
      "path": "code_of_conduct.html",
      "title": "Code of Conduct",
      "author": [],
      "contents": "\n\nContents\nOverview\nExamples of behavior that contributes to creating a positive environment include:\nExamples of unacceptable behavior by class participants include:\nOther resources at UCSB\n\nAll enrolled students, auditors, and course visitors are expected to comply with the following code of conduct. We expect cooperation from all members to help ensure a safe and welcoming environment for everybody.\nOverview\nWe are determined to make our courses welcoming, inclusive and harassment-free for everyone regardless of gender, gender identity and expression, race, age, sexual orientation, disability, physical appearance, body size, or religion (or lack thereof). We do not tolerate harassment of class participants, teaching assistants, or instructors in any form. Derogatory, abusive, demeaning or sexual language and imagery is not appropriate or acceptable. Saying something “as a joke” does not make it less offensive, harmful, or consequential.\nAnything not covered here but that exists in the UCSB Student Conduct Code also applies, and will be enforced by UCSB Policy.\nThese expectations and consequences apply to synchronous discussions, office hours, the course Slack workspace, and all other modes of communication, posting or discussion by course participants.\nExamples of behavior that contributes to creating a positive environment include:\nUsing welcoming and inclusive language\nBeing an aware and respectful colleague (raise your hand when asked, respect others’ time and space, include peers in small discussions, don’t dominate meetings, etc.)\nGiving proper credit to the creator (of an idea/material/solution/etc.)\nBeing respectful of differing viewpoints and experiences\nShowing empathy towards all community members\nUnderstanding that an individual’s experience and worldview are influenced by multiple (and often compounding) facets of their identity, and that your perception of a situation/topic/reaction may be very different from your classmates’\nExamples of unacceptable behavior by class participants include:\nDistracting other students in classes in labs, or otherwise distracting from their education\nAny abuse, disrespect or harassment of teaching assistants, other students, or teachers, is not tolerated and will result in disciplinary action as needed\nThe use of unwelcome sexual attention or advances\nTrolling, insulting/derogatory comments or language, and personal or political attacks\nPublic or private harassment\nPublishing others’ private information, such as a physical or electronic address, without explicit permission\nOther conduct which could reasonably be considered inappropriate in a professional setting\nMembers asked to stop any harassing behavior are expected to comply immediately. If you are being harassed, notice that someone else is being harassed, or have any other concerns in or related to these classes, you are welcome to contact Allison or use outside resources.\nOther resources at UCSB\nAt Campus Advocacy, Resources and Education (CARE) you can chat with a UCSB staff member in a confidential setting. CARE assists faculty, staff and students who have been impacted by sexual harassment, sexual assault, domestic/dating violence, and stalking. The office is confidential so you can talk with a staff member in private without any reporting obligations.\nPhone: (805) 893-4613.\nOffice is located in the Student Resource Building (SRB) near parking lot 23.\nAnother confidential resource is the Campus Ombuds office. The Ombuds office is particularly helpful if you would like to describe a sensitive issue in a confidential setting and learn more about campus resources to address the issue. The Ombuds office is located at 1205-K Girvetz Hall and their phone number is 805-893-3285. The Ombuds office provides consultation, mediation, and facilitation, among other services, for faculty, staff and students.\nUCSB Academic Counseling is a resource outside of the Bren department that can help with a number of topics from academic planning to “balancing personal difficulties in academics.”\nGraduate counselor: Ryan Sims\nPhone: 805-893-2068\nEmail: ryan.sims@graddiv.ucsb.edu\nThis is a living document, that we are always hoping to improve. If you have suggestions, questions or ideas for how we can update our Code of Conduct, we encourage you to reach out to us and will be grateful for your feedback.\nContributions by:\nAllison Horst\nJessica Couture {“mode”:“full”,“isActive”:false}\n\n\n\n",
      "last_modified": "2021-08-02T22:35:36-07:00"
    },
    {
      "path": "day_1.html",
      "title": "Reproducible & collaborative workflows",
      "author": [],
      "contents": "\n\nContents\nReproducible Workflows\nLecture 1: Definitions and Concepts\nWhy going reproducible\nHow\nPlaning things\nFlow charts and pseudocode\nManaging your data\n\n\nCoding together\nLearning Objectives\nWhy collaborative coding\nHow to code together\nTools\n\nGitHub as a collaborative tool\nQuick recap on version control\n\nCollaborating through Forking\nHands-on\n\nFurther reading\nData and scientific workflow management:\nOpen Science\nCollaborative coding\nCode Review\n\n\nReproducible Workflows\nLecture 1: Definitions and Concepts\nSlide deck\nWhy going reproducible\nThere are many reasons why it is essential to make your science reproducible and how the necessity of openness is a cornerstone of the integrity and efficacy of the scientific research process. Here we will also be focusing on why making your work reproducible will empower you to iterate quickly, integrate new information more easily to iterate quickly, scale your analysis to larger data sets, and better collaborate by receiving feedback and contributions from others, as well as enable your “future self” to reuse and build from your own work.\nTo make your data-riven research reproducible, it is important to develop scientific workflows that will be relying on programming to accomplish the necessary tasks to go from the raw data to the results (figures, new data, publications, …) of your analysis. Scripting languages, even better open ones, such as R and python, are well-suited for scientists to develop reproducible scientific workflows. Those scripting languages provide a large ecosystem of libraries (also referred to as packages or modules) that are ready to be leveraged to conduct analysis and modeling. In this course we will introduce how to use R, git and GitHub to develop such workflows as a team.\n\n\n\nFigure 1: Workflow example using the tidyverse. Note the program box around the workflow and the iterative nature of the analytical process described. Source: R for Data Science https://r4ds.had.co.nz/\n\n\n\nTwo points to stress about this figure:\nWorkflows are rarely linear… even less so their implementation\nNote the programming box – yes, you’ll need to code this :)\nWorkflows are developed iteratively, and one of the most helpful things you can do as a data scientist is to talk about them with your research team.\nHow\nWe recommend shying away from spreadsheets as an analytical tool, as well as Graphical User Interfaces (GUI) where you need to click on buttons to do your analysis. Although convenient for data exploration, GUI will limit the reproducibility and the scalability of your analysis as human intervention is needed at every step. Spreadsheets can be useful to store tabular data, but it is recommended to script their analysis, as copy-pasting and references to cells are prone to mistake (see Reinhart and Rogof example). It is also very difficult to track changes and to scale your analysis using spreadsheets. In addition, auto-formatting (number, date, character, …) can silently introduce modifications to your data (e.g. One in five genetics papers contains errors thanks to Microsoft Excel).\nPlaning things\nDon’t start implementing nor coding without planning! It is important to stress that scientists write scripts to help them to investigate scientific question(s). Therefore scripting should not drive our analysis and thinking. We strongly recommend you take the time to plan ahead all the steps you need to conduct your analysis. Developing such a scientific workflow will help you to narrow down the tasks that are needed to move forward your analysis.\nFlow charts and pseudocode\nMaterials\nManaging your data\nCoding together\nLearning Objectives\nIn this part of the lesson, you will learn:\nWhy git is useful for reproducible analysis\nHow to use git to track changes to your work over time\nHow to use GitHub to collaborate with others\nHow to write effective commit messages\nHow to structure your commits so your changes are clear to others\nHow to fork a repository to contribute to its content\nHow to create a pull request\nHow to review a pull request\nWhy collaborative coding\nSlides: https://brunj7.github.io/meds-distill-template/slides/collaborative_coding.html\nEnvironmental Data Science (EDS), as many other data-driven research fields, requires a transdisciplinary approach to tackle challenges that often span across several domains of expertise. Working as a team will leverage know-how from diverse collaborators and be the most efficient way to tackle complex problems in EDS. Consequently collaborative skills are required to work effectively as a member of a team. No matter their focus, highly effective teams share certain characteristics:\nRight size\nDiverse group of people with the right mix of skills, knowledge, and competencies\nAligned purpose and incentives\nEffective organizational structure\nStrong individual contributions\nSupportive team processes and culture\nSince Analytical Workflows are rarely linear! and are developed iteratively, the most efficient way to iterate quickly on your analysis is to use scripts and leave copy-pasting behind. Programming as part of a team is different than writing a script for your(present)self. However learning programming as part of a team is not only critical to the efficacy of your team, it will also you help you to grow as a programmer by:\nMotivating you to document well your work\nHelping you to think how to make your work reusable (by you, your future you and others)\nLearning to read code from collaborators to build upon each others work\nGain further knowledge in software development tools, such as version control\nDeveloping those skills will accelerate your research and open the door for you to contribute to open source projects.\nHow to code together\nIt is important to acknowledge that there are many solutions to the complex research questions you will be facing in EDS. Each of those solutions will have several possible implementations, meaning that more likely you might code this implementation differently than your collaborators. Integrated software engineer teams generally try to mitigate this by developing coding standards and conventions that will guide how to write code and develop specific implementation. In scientific teams in which the collaboration is more loose and maybe more ephemeral as well, developing detailed coding standards will be too much of an overhead. However, we think it is important to acknowledge that coding style may varies among the data scientists of a project and it is a good discussion to have among the team at the beginning of the project. For example, in R it could be trying to use the tidyverse approach as much as possible. We also think there are two activities that will make the team more efficient: Code Review and Pair Programming.\nTools\nThe good news is there are several tools out there that have been designed to make developing code as a team more efficient. In this course, we will focus on getting familiar with the following:\nVersion control system: say goodbye to save as\nCode repository: where we share code and communicate ideas and feedback\nGitHub as a collaborative tool\nQuick recap on version control\ngit and GitHub quick recap\nCollaborating through Forking\nA fork is a copy of a repository that will be stored under your user account. Forking a repository allows you to freely experiment with changes without affecting the original project. We can create a fork on Github by clicking the “fork” button in the top right corner of our repository web page. \nMost commonly, forks are used to either propose changes to someone else’s project or to use someone else’s project as a starting point for your own idea.\nWhen you are satisfied with your work, you can initiate a Pull Request to initiate discussion about your modifications and requesting to integrate your changes to the main repository. Your commit history allows the original repository administrators to see exactly what changes would be merged if they accept your request. Do this by going to the original repository and clicking the “New pull request” button\nNext, click “compare across forks”, and use the dropdown menus to select your fork as the “head fork” and the original repository as the “base fork”.\n\nThen type a title and description for the changes you would like to make. By using GitHub’s @mention syntax in your Pull Request message, you can ask for feedback from specific people or teams.\nThis workflow is recommended when you do not have push/write access to a repository, such as contributing to a open source software or R package, or if you are heavily changing a project.\nHands-on\nFurther reading\nHere are a few selected publications to help you to learn more about these topics.\nData and scientific workflow management:\nSome Simple Guidelines for Effective Data Management:https://doi.org/10.1890/0012-9623-90.2.205\nBasic concepts of data management:https://www.dataone.org/education-modules\nGood enough practices in Scientific Computing:https://doi.org/10.1371/journal.pcbi.1005510\nScript your analysis:https://doi.org/10.1038/nj7638-563a\nPrinciples for data analysis workflows:https://doi.org/10.1371/journal.pcbi.1008770\nOpen Science\nThe Tao of open science for ecology:https://doi.org/10.1890/ES14-00402.1\nChallenges and Opportunities of Open Data in Ecology:https://doi.org/10.1126/science.1197962\nScientific computing: Code alerthttps://doi.org/10.1038/nj7638-563a\nOur path to better science in less time using open data science toolshttps://doi.org/10.1038%2Fs41559-017-0160\nFAIR data guiding principleshttps://doi.org/10.1038/sdata.2016.18\nSkills and Knowledge for Data-Intensive Environmental Research https://doi.org/10.1093/biosci/bix025\nLet go your datahttps://doi.org/10.1038/s41563-019-0539-5\nCollaborative coding\nA new grad’s guide to coding as a team - Atlassian: https://www.atlassian.com/blog/wp-content/uploads/HelloWorldEbook.pdf\n10 tips for efficient programming: https://www.devx.com/enterprise/top-10-tips-for-efficient-team-coding.html\nAgile Manifesto: https://moodle2019-20.ua.es/moodle/pluginfile.php/2213/mod_resource/content/2/agile-manifesto.pdf\nCode Review\nSmall-Group Code Reviews For Education: https://cacm.acm.org/blogs/blog-cacm/175944-small-group-code-reviews-for-education/fulltext\n\n\n\n",
      "last_modified": "2021-08-02T22:35:36-07:00"
    },
    {
      "path": "day_2.html",
      "title": "Scientific Coding as a Team",
      "author": [],
      "contents": "\n\nContents\nGitHub branches\nCollaborating through write / push access\n\nBranches\nWorking with branches\nCreating a new branch\nUsing a branch\n\nGitHub Hands-on\nOur asks\nPrompt\n\n\nOrganizing your project\nScripting languages\nStructure of a script\nA few programming practices that will help a long way\n\n\nFurther reading\nGitHub Workflow\nGit using RStudio\n\n\n\nGitHub branches\nCollaborating through write / push access\nWhen you collaborate closely and actively with colleagues, you do not want necessarily to have to review all their changes through pull requests. You can then give them write access (git push) to your repository to allow them to directly edit and contribute to its content. This is the workflow we will recommend to use within your working group.\nAdding collaborators to a repository\nClick on the repository\nOn the right panel, click \nOn the left pane, click Collaborators and enter the usernames you want to add\nUnder this collaborative workflow, we recommend to use git branches combined with pull requests to avoid conflicts and to track and discuss collaborators contributions.\nBranches\nadapted from https://www.atlassian.com/git/tutorials/git-mergeWhat are branches? Well in fact nothing new, as the master is a branch. A branch represents an independent line of development, parallel to the master (branch).\nWhy should you use branches? For 2 main reasons:\nWe want the master to only keep a version of the code that is working\nWe want to version the code we are developing to add/test new features (for now we mostly talk about feature branch) in our script without altering the version on the master.\nWorking with branches\nCreating a new branch\nIn RStudio, you can create a branch using the git tab.\nClick on the branch button\n\n\n\nFill the branch name in the new branch window; in this example, we are going to use test for the name; leave the other options as default and click create\n\n\n\nyou will be directly creating a local and remote branch and switch to it\n\n\n\nCongratulations you just created your first branch!\nLet us check on Github:\n\n\n\nAs you can see, now there are two branches on our remote repository: - master - test\nUsing a branch\nHere there is nothing new. The workflow is exactly the same as we did before, except our commits will be created on the test branch instead of the master branch.\nGitHub Hands-on\nIn this section we will be using the GitHub.com website and show you do not need to be a programmer to use version control and edit files on GitHub!\nChecks: If you have not already created a GitHub username, please do so now: - GitHub: https://github.com - Follow optional advice on choosing your username\nOur asks\nAs a Team of two: - Help each other, everyone is bringing different skills! Talk it out! - Listen to each other; avoid judgment and solutioneering. - Have fun!\nPrompt\nPerson 1 (owner):\nCreate a (first) repository following these instructions steps 1-6\n\nAdd Person 2 as collaborator following these instructions\nPerson 2: Modify a file\nCheck your email to accept the invitation\nGo to the repository website (link is provided in the invitation)\nClick on pen at the top of the README.md file to edit it\n\nReplace the title (first line starting with #) with something better! Maybe Favorite Desserts\nAdd your name and your favorite dessert below the title: e.g. - Julien: crepes\nAdd a descriptive message\n - Commit your changes\n\n\n\nPerson 1: add a file\nDownload this csv file about your favorite desserts to your computer\nJust drag and drop it on the Github web page of your repository to upload it\nAdd a short message about the file e.g. Adding dessert csv & hit Commit changes\nYour have has been uploaded. Click on the filename to see it!\nYou should have something similar to this repo: https://github.com/brunj7/favorite-desserts\nBonus Person 2:\nTry to edit the csv file directly on GitHub!\nNo need to be a programmer to contribute to analytical workflows with GitHub!!\nOrganizing your project\nScripting languages\nCompared to other programming languages (such as C, fortran, …), scripting languages are not required to be compiled to be executable. One consequence is that, generally, scripts will execute more slowly than a compiled executable program, because they need an interpreter. However, the more natural language oriented syntax of scripts make them easier to learn and use. In addition, numerous libraries are available to streamline scientific analysis.\nStructure of a script\nA script can be divided into several main sections. Each scripting language has its own syntax and style, but these main components are generally accepted:\nFrom the top to the bottom of your script:\nSummary explaining the purpose of the script\nAttribution: authors, contributors, date of last update, contact info\nImport of external modules / packages\nConstant definitions (g = 9.81)\nFunction definitions (ideally respecting the order in which they are called)\nMain code calling the different functions\nA few programming practices that will help a long way\nComment your code. This will allow you to inform your collaborators (but also your future self!) about the tasks your script accomplishes\nUse variables and constants instead of repeating values in different places of the code. This will let you update those values more easily\nChoose descriptive names for your variables and functions, not generic ones. If you store a list of files, do not use x for the variable name, use instead files. Even better use input_files if you are listing the files you are importing.\nBe consistent in terms of style (input_files, inputFiles,…) used to name variables and functions. Just pick one and stick to it!\nkeep it simple, stupid (KISS). Do not create overly complicated or nested statements. Break your tasks in several simple lines of code instead of embedding a lot of executions in one (complicated line). It will save you time while debugging and make your code more readable to others\nGo modular! Break down tasks into small code fragments such as functions or code chunks. It will make your code reusable for you and others (if well documented). Keep functions simple; they should only implement one or few (related) tasks\nDon’t Repeat Yourself (DRY). If you start copy/pasting part of your code changing a few parameters => write a function and call it several times with different parameters. Add flow control such as loops and conditions. It will be easier to debug, change and maintain\nTest your code. Test your code against values you would expect or computed with another software. Try hedge cases, such as NA, negative values, ….\nIterate with small steps, implement few changes at a time to your code. Test, fix, and move forward!\nWe hope this overview section about scientific programming has raised your interest in learning more about best practices and tools for developing reproducible workflows using scripting languages.\nFurther reading\nGitHub Workflow\nGitHub:\nguides on how to use GitHub: https://guides.github.com/\nGitHub from RStudio: http://r-pkgs.had.co.nz/git.html#git-pull\n\nForking:\nhttps://help.github.com/articles/fork-a-repo/\nhttps://guides.github.com/activities/forking/\n\nComparison of git repository host services: https://www.git-tower.com/blog/git-hosting-services-compared/\nBranches\ninteractive tutorial on branches: http://learngitbranching.js.org/\nusing git in a collaborative environment: https://www.atlassian.com/git/tutorials/comparing-workflows/centralized-workflow https://moodle2019-20.ua.es/moodle/pluginfile.php/2213/mod_resource/content/2/agile-manifesto.pdf\n\nGit using RStudio\nHappy Git and GitHub for the useR: http://happygitwithr.com/\nR packages - Git and GitHub: http://r-pkgs.had.co.nz/git.html#git-init\nGit mainly from the command line:\nInteractive git 101: https://try.github.io/\nVery good tutorial about git: https://www.atlassian.com/git/tutorials/what-is-version-control\nGit tutorial geared towards scientists: http://nyuccl.org/pages/gittutorial/\nShort intro to git basics: https://github.com/mbjones/gitbasics\nGit documentation about the basics: http://gitref.org/basic/\nGit documentation - the basics: https://git-scm.com/book/en/v2/Getting-Started-Git-Basics\nGit terminology: https://www.atlassian.com/git/glossary/terminology\nIn trouble, guide to know what to do: http://justinhileman.info/article/git-pretty/git-pretty.png\nWant to undo something? https://github.com/blog/2019-how-to-undo-almost-anything-with-git\nGit terminology: https://www.atlassian.com/git/glossary/terminology\n8 tips to work better with git: https://about.gitlab.com/2015/02/19/8-tips-to-help-you-work-better-with-git/\nGitPro book (2nd edition): https://git-scm.com/book/en/v2\n\n\n\n",
      "last_modified": "2021-08-02T22:35:37-07:00"
    },
    {
      "path": "day_3.html",
      "title": "Managing your code and data on a remote server",
      "author": [],
      "contents": "\n\nContents\nWorking on a remote server\n\nWorking on a remote server\nMaterials\nCERN computing center\n\n\n",
      "last_modified": "2021-08-02T22:35:37-07:00"
    },
    {
      "path": "day_4.html",
      "title": "Code Review & Pair Programming",
      "author": [],
      "contents": "\n\nContents\nCode review feedback\nPair programming\nBasic principles & practices\nTips and Tricks for Effective Team Programming\n\nA few more thoughts\nMore is not always better\nProject management\n\n\nCode review feedback\nCode review is an asynchronous team activity. Despite its impressive name, code review should be seen by the person asking for the review (submitter) as a great opportunity to have one more pair of eyes looking at your code and providing feedback to make your code better. The “reviewer” should see this activity as a great way to learn from others.\nYou actually have already pratice this a little when practicing merging pull request!!\nPair programming\nPair programming is an synchronous team activity, where several programmers get to work together on the same piece of code. This is a great way to gain a better sense of what coding style people are using and better understand their way of solving challenges. It is also a great way to learn from each other. Generally, there is one Driver who is the person typing at the computer. The other role is called Navigator(s). The Navigator does not write code and focuses on finding solutions to the problem. Their use of computer should be limited to searching online for solutions.\nBasic principles & practices\nAdapted from Woody Zuill https://www.agileconnection.com/article/getting-started-mob-programming\nTreat each other with kindness, consideration, and respect - makes group work more fun and sustainable\nDriver/navigator pair programming adapted to work with the whole team - “For an idea to go from your head into the computer, it must go through someone else’s hands.” Speak at the highest level of abstraction that the driver (and the rest of the team) is able to digest at the moment\nTimed Rotation - 20-60 minutes. We don’t require that everyone take the driver role; it is everyone’s choice whether to do so\nWhole Team - every contributor to the project is an integral part of the whole team; when we don’t have the skills we need within the team, we find someone who does and invite them to work with us to accomplish the needed work\nReflect, Tune, and Adjust Frequently - based on agile principle: “At regular intervals, the team reflects on how to become more effective, then tunes and adjusts its behavior accordingly.”\nTips and Tricks for Effective Team Programming\nAdapted from Corey Johannsen: https://blog.newrelic.com/2017/10/31/mob-programming-hurdles/\nSuggest, don’t dictate: Instead of telling the driver what to type into their editor, we explain what we’re trying to accomplish and then help the driver find the best solution. We’ve found that drivers learn better this way, and they don’t just end up feeling like a stenographer. Whenever possible, we ask questions that lead the driver to discover the answers on their own.\nStay focused and be present: Shut your laptop and put your phone away. I’ve struggled with following this guideline—we all have—and I recognize that the distraction almost always affects the rest of the mob. We tell all our mob members to be present, and if you can’t, it’s OK to leave until you can be.\nUse a timer, but be ready to pause it: We switch drivers every 20 - 60 minutes. However, we often wander off implementation into design discussions—it’s unavoidable—so this is when we pause the timer. This is another key guideline of our mob: the time you spend driving should be dedicated to writing the code that helps complete the task, not discussing design solutions.\nSet specific tasks for each session: When our mob gathers for a session, we first agree on and create a checklist of the tasks we are going to complete, and order them by priority on a whiteboard. This ensures we are all focused on the same task and keeps us moving forward. Additionally, this keeps us aligned with Minimal Marketable Feature (MMF) work, which we can communicate with our engineering and product managers to assure them we’re completing tasks that align with developing small, self-contained features that demonstrate immediate customer value.\nA few more thoughts\nMore is not always better\nAdding more analysts late into a project can be counterproductive (Brooks’ law)\nOvertime is not the solution as it will increase likeliness of errors and thus frustration. Try to focus on finding at what time of the day you are the most productive at coding instead\nProject management\nThis is a big topic and will be highly influenced by the team you are working with both in terms of practices and tools used to manage the project. On the coding side, there is a lot to borrow from Agile development approach for scientist. In a nutshell: “put it out there fast and iterate”. In other words to wait to try to have the perfect code or analysis before sharing it with your collaborators. It is more efficient to share and discuss an early / draft version, gather feedback and iterate.\n\n\n\n",
      "last_modified": "2021-08-02T22:35:38-07:00"
    },
    {
      "path": "day_5.html",
      "title": "Documenting and sharing things",
      "author": [],
      "contents": "\n\nContents\nThe power of README\nCode Commenting\nInline\nFunctions\n\nLeveraging Notebooks\nMetadata\nHuman readable\nMachine readable\n\nWhat about your computing environment\nSession info\nLooking ahead\ncontainers\nData Provenance\n\n\n\nThe power of README\nCode Commenting\nInline\nFunctions\nLeveraging Notebooks\nMetadata\nHuman readable\nMachine readable\nWhat about your computing environment\nSession info\nLooking ahead\ncontainers\nData Provenance\n\n\n\n",
      "last_modified": "2021-08-02T22:35:38-07:00"
    },
    {
      "path": "git_github_recap.html",
      "title": "git and GitHub recap",
      "author": [],
      "contents": "\n\nContents\ngit\nGitHub\n\nVersion Control with git and GitHub\nAka – Say goodbye to script_JB_03v5b.R !!\nThe problem with save_as\n\n\n\nEvery file in the scientific process changes. Manuscripts are edited. Figures get revised. Code gets fixed when problems are discovered. Data files get combined together, then errors are fixed, and then they are split and combined again. In the course of a single analysis, one can expect thousands of changes to files. And yet, all we use to track this are simplistic filenames. You might think there is a better way, and you’d be right: version control.\nVersion control systems help you track all of the changes to your files, without the spaghetti mess that ensues from simple file renaming. In other words, version control is a system that helps you to manage the different versions of your files in an organized manner. It will help you to never have to duplicate files using save as as a way to keep different versions of a file (see below). Version control help you to create a timeline of snapshots containing the different versions of a file. At any point in time, you will be able to roll back to a specific version. Bonus: you can add a short description (commit message) to remember what each specific version is about.\nWhat is the difference between git and GitHub?\ngit: is a version control software used to track files in a folder (a repository)\ngit creates a timeline or history of your files\n\nGitHub: is a code repository in the cloud that enables users to store their git repositories and share them with others. Github also add many features to manage projects and document your work.\ngit\n\nThis section focuses on the code versioning system called Git. Note that there are others, such as Mercurial or svn for example.\nGit is a free and open source distributed version control system. It has many functionalities and was originally geared towards software development and production environment. In fact, Git was initially designed and developed in 2005 by Linux kernel developers (including Linus Torvalds) to track the development of the Linux kernel. Here is a fun video of Linus Torvalds touting Git to Google.\nHow does it work?\nGit can be enabled on a specific folder/directory on your file system to version files within that directory (including sub-directories). In git (and other version control systems) terms, this “tracked folder” is called a repository (which formally is a specific data structure storing versioning information).\nWhat git is not:\nGit is not a backup per se\nGit is not good at versioning large files (there are workarounds) => not meant for data\nRepository\nGit can be enabled on a specific folder/directory on your file system to version files within that directory (including sub-directories). In git (and other version control systems) terms, this “tracked folder” is called a repository (which formally is a specific data structure storing versioning information).\nAlthough there many ways to start a new repository, GitHub (or any other cloud solutions, such as GitLab) provide among the most convenient way of starting a repository.\n\nGitHub\nGitHub is a company that hosts git repositories online and provides several collaboration features (among which forking). GitHub fosters a great user community and has built a nice web interface to git, also adding great visualization/rendering capacities of your data.\nGitHub.com: https://github.com\nA user account: https://github.com/brunj7\nAn organization account: https://github.com/nceas\nNCEAS GitHub instance: https://github.nceas.ucsb.edu/\nLet’s look at a repository on GitHub\nThis screen shows the copy of a repository stored on GitHub, with its list of files, when the files and directories were last modified, and some information on who made the most recent changes.\n\nIf we drill into the “commits” for the repository, we can see the history of changes made to all of the files. Looks like kellijohnson and seananderson were fixing things in June and July:\n\nAnd finally, if we drill into the changes made on June 13, we can see exactly what was changed in each file:\n Tracking these changes, and seeing how they relate to released versions of software and files is exactly what Git and GitHub are good for. We will show how they can really be effective for tracking versions of scientific code, figures, and manuscripts to accomplish a reproducible workflow.\n\n\n\n",
      "last_modified": "2021-08-02T22:35:39-07:00"
    },
    {
      "path": "index.html",
      "title": "EDS 214: Analytical Workflows and Scientific Reproducibility",
      "description": "This course will introduce students to conceptual organization of workflows as a way to conduct reproducible analyses",
      "author": [],
      "contents": "\n\nContents\nInstructor\nTutor\nImportant links\nCourse description\nPredictable daily schedule\nLearning objectives\nSessions (subject to change)\nCourse requirements\nComputing\nTextbook\n\n\n\n\n\nFigure 1: Workflow example using the tidyverse. Note the program box around the workflow and the iterative nature of the analytical process described. Source: R for Data Science https://r4ds.had.co.nz/\n\n\n\nInstructor\nJulien Brun (brun@nceas.ucsb.edu)\nTutor\nCasey O’Hara (cohara@bren.ucsb.edu)\nImportant links\nCourse syllabus\nCode of Conduct\nCourse description\nThe generation and analysis of environmental data is often a complex, multi-step process that may involve the collaboration of many people. Increasingly tools that document and help to organize workflows are being used to ensure reproducibility, shareability, and transparency of the results. This course will introduce students to the conceptual organization of workflows (including code, documents, and data) as a way to conduct reproducible analyses. These concepts will be combined with the practice of various software tools and collaborative coding techniques to develop and manage multi-step analytical workflows as a team.\nPredictable daily schedule\nCourse dates: Monday (2021-08-02) - Friday (2021-08-06)\nEDS 214 is an intensive 1-week long 2-unit course. Students should plan to attend all scheduled sessions. All course requirements will be completed between 8am and 5pm PST (M - F), i.e. you are not expected to do additional work for EDS 214 outside of those hours, unless you are working with the Teaching Assistant in student hours.\nTentative daily schedule (subject to change):\nTime (PST)\nActivity\n8:00am - 9:00am\nLecture 1 (60 min)\n9:00am - 9:15am\nBreak 1 (15 min)\n9:15am - 10:15am\nInteractive Session 1 (60 min)\n10:15am - 11:00am\nFlex time (45 min)\n11:00am - 12:15pm\nBreak 2 (75 min)\n12:15pm - 1:15pm\nLecture 2 (60 min)\n1:15pm - 2:15pm\nInteractive Session 2 (60 min)\n2:15pm - 3:15pm\nFlex time (60 min)\n3:15pm - 5:00pm\nInteractive Session 3: Group & challenge tasks (105 min)\nLearning objectives\nThe goal of EDS 214 (Analytical Workflows and Scientific Reproducibility) is to expose incoming MEDS students to “good enough” practices of scientific programming develop skills in environmental data science to produce reproducible research. By the end of the course, students should be able to:\nDevelop knowledge in scientific analytical workflows To learn how to make your data-riven research reproducible, it is important to develop scientific workflows that will be relying on programming to accomplish the necessary tasks to go from the raw data to the results of your analysis (figures, new data, publications, …). Scripting languages, even better open ones such as R and python, are well-suited for scientists to develop reproducible scientific workflows, but are not the only tools you will need to develop reproducible and collaborative workflows\nLearn how to code in a collaborative manner by practicing techniques such as code review and pair programming. Become comfortable asking for and conducting code review using git and GitHub to create pull request, ask feedback from peers, and merge changes into the main repository. Practice pair programming to cement the collaborative development of reproducible analytical workflows\nPractice documenting code and data in a systematic way that will enable your collaborators, including your future self, to understand and reuse your work\nSessions (subject to change)\n\n\n{\"x\":{\"filter\":\"none\",\"data\":[[\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\"],[\"Monday 8/23: morning\",\"Monday 8/23: afternoon\",\"Tuesday 8/24: morning\",\"Tuesday 8/24: afternoon\",\"Wednesday 8/25: morning (late start)\",\"Wednesday 8/25: afternoon\",\"Thursday 8/26: morning\",\"Thursday 8/26: afternoon\",\"Friday 8/27: morning\",\"Friday 8/27 afternoon\"],[\"Repoducible workflows\",\"Collaborating with Github 101\",\"Collaborating with Github 102\",\"Organizing your project\",\"Working on a remote server\",\"Working on a remote server\",\"Code review and pair programming\",\"Documenting things\",\"Sharing things\",\"Presentations\"],[\"Planning things and writing pseudo code\",\"Forking and Pull Requests\",\"Branches and issues\",\"Notebooks, scripts, data and more\",\"RStudio server &amp; the command line\",\"Orgaizing projects on a server: how to manage data and codes\",\"Team project\",\"Team project\",\"Team project\",\"Team project\"],[\"the Markdown syntax\",\"Comparing R and python approaches to notebooks\",\"Open\",\"MEDS IT team (Brad &amp; Kat) -- computing ressources\",\"No flex sessions - Wednesday late start\",\"No flex sessions - Wednesday late start\",\"Meet your next instructor  --  Jim Frew,  Bren School, UCSB\",\"RStudio debugger\",\"Xaringan\",\"Work on your online presence (GitHub profile and distill website)\"]],\"container\":\"<table class=\\\"display\\\">\\n  <thead>\\n    <tr>\\n      <th> <\\/th>\\n      <th>Day / Session<\\/th>\\n      <th>Topics<\\/th>\\n      <th>Interactive Sessions<\\/th>\\n      <th>Flex Sessions<\\/th>\\n    <\\/tr>\\n  <\\/thead>\\n<\\/table>\",\"options\":{\"order\":[],\"autoWidth\":false,\"orderClasses\":false,\"columnDefs\":[{\"orderable\":false,\"targets\":0}]}},\"evals\":[],\"jsHooks\":[]}\nCourse requirements\nComputing\nMinimum MEDS device requirements\nHave a ready to be used GitHub Account (https://github.com/)\nTextbook\nR for Data Science: https://r4ds.had.co.nz/\nThe Practice of Reproducible Research: http://www.practicereproducibleresearch.org/\n\n\n\n",
      "last_modified": "2021-08-02T22:41:24-07:00"
    },
    {
      "path": "pseudocode.html",
      "title": "Flow charts and pseudocode",
      "author": [],
      "contents": "\n\nContents\nFlow charts\nPseudocode\n\nFlow charts\nFlowcharts are useful to visualize and develop analytical workflow. It guides planning and anticipating the various computing and analytical tasks that will be required to complete an analysis. It also helps explaining the different steps to your collaborators and team. You can use a flowchart to spell out the logic behind a analytical workflow before ever starting to code. It can help to organize big-picture thinking and provide a guide when it comes time to code. More specifically, flowcharts can:\nVisualize the sequence of the different phases of the analytical process from data collection to implementing analyses\nBetter define the scope and resources needed both in terms of project data management and computing ressources needed\nDiscuss who will be in charge and involved in the development of the different parts of the workflow\nList the products / outputs that will result from your analysis - such as data, codes, publications, web presence, … - and discuss how to best presrve and share them\nOften, programmers may write pseudocode as a next step, to provide greater detail than the flowchart in terms of processing steps and implementation.\nPseudocode\nPseudocode is a technique used to describe the distinct steps to implement steps of a workflow into a sequence of pragrammatical steps in a manner that is easy to understand for anyone with basic programming knowledge. Pseudo can be implemented more or less formally and at various level of details. Here in this course, we will be focusing on the process more than the exact syntax to use, keeping the level of details at level that provide more details than a flow chart.\nOne additional advantage of going through this process is that it is agnostic of the tools / programming languages that you will be using to develop your analytical workflow.\n\n\n\n",
      "last_modified": "2021-08-02T22:35:42-07:00"
    },
    {
      "path": "README.html",
      "author": [],
      "contents": "\n\nContents\nEDS 214: Analytical Workflows and Scientific Reproducibility\nInstructor\nCourse description\n\n\nEDS 214: Analytical Workflows and Scientific Reproducibility\nInstructor\nJulien Brun (brun@nceas.ucsb.edu)\nCourse description\nThe generation and analysis of environmental data is often a complex, multi-step process that may involve the collaboration of many people. Increasingly tools that document help to organize and document workflows are being used to ensure reproducibility and transparency of the results. This course will introduce students to conceptual organization of workflows as a way to conduct reproducible analyses, as well as various software tools that help users to manage multi-step processes that requires tools for storing, managing and sharing workflows, code, documents and data.\n\nThis website template is made with distill by RStudio as an optional starting point for teachers in the Master of Environmental Data Science Program at the Bren School (UC Santa Barbara).\nClick here for a template preview.\n\n\n",
      "last_modified": "2021-08-02T22:41:24-07:00"
    },
    {
      "path": "remote_server.html",
      "title": "Working on a remote server",
      "author": [],
      "contents": "\n\nContents\nWorking on a Remote Machine\nLearning Objectives\nWhy working on a remote machine?\nWorking Group / Collaborative Setup\nWhat does working on a remote server means?\n\nRStudio Server\nConnecting to MEDS Analytical Server\n\nJupyter Hub\nCommand line\nIntroduction to UNIX and its siblings\nThe Command Line Interface (CLI)\nNavigating and managing files/directories in *NIX\nGeneral command syntax\nGetting things done\n\nUploading Files to a server\nRStudio\nsFTP Software\nscp\n\nAdvanced Topics at the command line\nUnix systems are multi-user\nA sampling of simple commands for dealing with files\nAll files have permissions and ownership\nGetting help\nHistory\nGet into the flow, with pipes\nText editing\nCreate custom commands with “alias”\nA sampling of more advanced utilities\n\n\n\nWorking on a Remote Machine\nLearning Objectives\nIn this lesson, you will learn:\nHow to connect to a remote server\nGet familiar with RStudio server\nGet a short introduction to the command line\nWhy working on a remote machine?\nOften the main motivation is to scale your analysis beyond what a personal computer can handle. R being pretty memory intensive, moving to a server often provides you more RAM and thus allows to load larger data in R without the need of slicing your data into chunks. But there are also other advantages, here are the main for scientits: * Power: More CPUs/Cores (24/32/48), More RAM (256/384GB) * Capacity: More disk space and generally* faster storage* (in highly optimized RAID arrays) * Security: Data are spread across multiple drives and have nightly backups * Collaboration: shared folders for code, data, and other materials; same software versions\n=> The operating system is more likely going to be Linux!!\nWorking Group / Collaborative Setup\nThere are additional reasons of particular importance in a collaborative set up, such as a working group: - Centralizing data management: As you know synthesis science is data intensive and often require to deal with a large number of heterogeneous data files. It can be complicated to make sure every collaborators as access to all the data they need. It is even harder to ensure that the exact same version of the data is used by everyone. Moving your workflow to a server, will allow to have only one copy of the data that you can share with all your collaborators. Even better, since everyone can access the same data, everybody will have the exact same path in their script!! - Make sure your files are safe: Generally, servers are managed by a System Administrator. This person is in charge of keeping the server up-to-date, secured from malwares and set up back up strategies to ensure all the files on the server are backed up. When using cloud solutions, you should always check if a back up plan is available for the resources your using.\nWhat does working on a remote server means?\nWhat does it mean for your workflow? The good news is that RStudio Server makes it very easy for RStudio users to start using a server for their analysis. The main changes are about: - File management: you will need to learn to move files (incluing your R scripts) to the server - Package installation: You can still install the R packages you need under your user (with some limitations). However some R packages will be already installed at the server level.\nRStudio Server\nFrom an user perspective, RStudio Server is your familiar RStudio interface in your web browser. The big difference however is that with RStudio Server the computation will be running on the remote machine instead of your local personal computer. This also means that the files you are seeing through the RStudio Server interface are located on the remote machine. And this also include your R packages!!! This remote file management is the main change you will have to adopt in your workflow.\nTo help with remote files management, the RStudio Server interface as few additional features that we will be discussing in the following sections.\n\n\n\nConnecting to MEDS Analytical Server\nGot to: https://???.ucsb.edu/\nSelect Login to RStudio Server\nEnter your credentials\nYou are in!\nJupyter Hub\nCommand line\nIntroduction to UNIX and its siblings\nUNIX\nOriginally developed at AT&T Bell Labs circa 1970. Has experienced a long, multi-branched evolutionary path\n\nPOSIX (Portable Operating System Interface)\na set of specifications of what an OS needs to qualify as “a Unix”, to enhance interoperability among all the “Unix” variants\n\nVarious Unices\nThe unix family treeOS X\nis a Unix!\n\n\nLinux\nis not fully POSIX-compliant, but certainly can be regarded as functionally Unix\n\n\nSome Unix hallmarks\nSupports multi-users, multi-processes\nHighly modular: many small tools that do one thing well, and can be combined\nCulture of text files and streams\nPrimary OS on HPC (High Performance Computing Systems)\nMain OS on which Internet was built\nThe Command Line Interface (CLI)\nThe CLI provides a direct way to interact with the Operating System, by typing in commands.\nWhy the CLI is worth learning\nTypically much more extensive access to features, commands, options\nCommand statements can be written down, saved (scripts!)\nEasier automation\nMuch “cheaper” to do work on a remote system (no need to transmit all the graphical stuff over the network)\nConnecting to a remote server via ssh\nFrom the gitbash (MS Windows) or the terminal (Mac) type:\nssh aurora.nceas.ucsb.edu\nYou will be prompted for your username and password.\naurora_sshYou can also directly add your username:\nssh brun@aurora.nceas.ucsb.edu\nIn this case, you will be only asked for your password as you already specified which user you want to connect with.\n** You can also use the terminal from RStudio!!**\n\nNavigating and managing files/directories in *NIX\npwd: Know where you are\nls: List the content of the directory\ncd: Go inside a directory\n~ : Home directory\n. : Here (current directory)\n..: Up one level (upper directory)\ngo to my “Home” directory: cd ~\ngo up one directory level: cd ..\nlist the content: ls\nlist the content showing hidden files: ls -a note that -a is referred as an option (modifies the command)\nMore files/directories manipulations:\nmkdir: Create a directory\ncp: Copy a file\nmv: Move a file\nrm /rmdir: Remove a file / directory use those carefully, there is no return / Trash!!\nPermissions\nFile permissionsExercise\nNavigate to the repo we created and inspect its content using the CLI\nNote: typing is not your thing? the <tab> key is your friend! One hit it will auto-complete the file/directory/path name for you. If there are many options, hit it twice to see the options.\nGeneral command syntax\n$ command [options] [arguments]\nwhere command must be an executable file on your PATH * echo $PATH\nand options can usually take two forms * short form: -a * long form: --all\nYou can combine the options:\nls -ltrh\nWhat do these options do?\nman ls\nfind\nShow me my Rmarkdown files!\nfind . -iname '*.Rmd'\nWhich files are larger than 1GB?\nfind . -size +1G\nWith more details about the files:\nfind . -size +1G -ls\nGetting things done\nSome useful, special commands using the Control key\nCancel (abort) a command: Ctrl-c\nStop (suspend) a command: Ctrl-z\nCtrl-z can be used to suspend, then background a process\nProcess management\nLike Windows Task Manager, OSX Activity Monitor\ntop, ps, jobs (hit q to get out!)\nkill to delete an unwanted job or process\nForeground and background: &\nWhat about “space”\nHow much storage is available on this system? df -h\nHow much storage am “I” using overall? du -hs <folder>\nHow much storage am “I” using, by subdirectory? du -h <folder>\nUploading Files to a server\nYou have several options to upload files to the server. Some are more convenient if you have few files, like RStudio interface, some are more built for uploading a lot of files at one, like specific software… and you guessed it the CLI :)\nRStudio\nYou can only upload one file at the time (you can zip a folder to trick it):\n\nsFTP Software\nAn efficient protocol to upload files is FTP (File Transfer Protocol). The s stands for secured. Any software supporting those protocols will work to transfer files.\nWe recommend the following free software:\nMac users: cyberduck\nWindows: WinSCP\n\nscp\nThe scp command is another convenient way to transfer a single file or directory using the CLI. You can run it from Aurora or from your local computer. Here is the basic syntax:\nscp <\/source/path> <hostname:/path/to/destination/>\nHere is an example of my uploading the file 10min-loop.R to Aurora from my laptop. The destination directory on Aurora is /home/brun/github_com/NCEAS/nceas-training/materials/files:\nscp 10min-loop.R brun@aurora.nceas.ucsb.edu:/home/brun/github_com/NCEAS/nceas-training/materials/files\n\nIf you want to upload an entire folder, you can add the -r option to the command. The general syntax is:\nscp -r /path/to/source-folder user@server:/path/to/destination-folder/\nHere is an example uploading all the images in the myplot folder\nscp -r myplots brun@aurora.nceas.ucsb.edu:/home/brun/github_com/NCEAS/nceas-training/materials/images\nAdvanced Topics at the command line\nUnix systems are multi-user\nWho else is logged into this machine? who\nWho is logged into “this shell”? whoami\nA sampling of simple commands for dealing with files\nwc count lines, words, and/or characters\ndiff compare two files for differences\nsort sort lines in a file\nuniq report or filter out repeated lines in a file\nAll files have permissions and ownership\nChange permissions: chmod\nChange ownership: chown\nList files showing ownership and permissions: ls -l\n      brun@aurora:~/postdoc-training/data$ ls -l\n      total 1136\n      -rw----r-- 1 brun scientist 1062050 May 29  2007 AT_85_to_89.csv\n      -rwxrwxr-x 1 brun scientist   16200 Jun 26 11:20 env.csv\n      -rwxr-xr-x 1 brun scientist   23358 Jun 26 11:20 locale.csv\n      -rwxrwx--- 1 brun scientist    7543 Jun 26 11:20 refrens.csv\n      -rwx------ 1 brun scientist   46653 Jun 26 11:20 sample.csv         \nClear contents in terminal window: clear\nGetting help\n<command> -h, <command> --help\nman, info, apropos, whereis\nSearch the web!\nHistory\nSee your command history: history\nRe-run last command: !! (pronounced “bang-bang”)\nRe-run 32th command: !32\nRe-run 5th from last command: !-5\nRe-run last command that started with ‘c’: !c\nGet into the flow, with pipes\nstdin, stdout, stderr$ ls *.png | wc -l\n$ ls *.png | wc -l > pngcount.txt\n$ diff <(sort file1.txt) <(sort file2.txt)\n$ ls foo 2>/dev/null\nnote use of * as character wildcard for zero or more matches (same in Mac and Windows); % is equivalent wildcard match in SQL queries\n? matches single character; _ is SQL query equivalent\nText editing\nSome editors\nvim\nemacs\nnano\n$ nano .bashrc\nLet’s look at our text file\ncat print file(s)\nhead print first few lines of file(s)\ntail print last few lines of file(s)\nless “pager” – view file interactively (type q to quit command)qqqbf\nod --t “octal dump” – to view file’s underlying binary/octal/hexadecimal/ASCII format\n$ brun@aurora:~/data$ head -3 env.csv\nEnvID,LocID,MinDate,MaxDate,AnnPPT,MAT,MaxAT,MinAT,WeatherS,Comments\n1,*Loc ID,-888,-888,-888,-888,-888,-888,-888,-888\n1,10101,-888,-888,-888,-888,-888,-888,-888,-888\n\n$ brun@aurora:~/data$ head -3 env.csv | od -cx\n0000000   E   n   v   I   D   ,   L   o   c   I   D   ,   M   i   n   D\n           6e45    4976    2c44    6f4c    4963    2c44    694d    446e\n0000020   a   t   e   ,   M   a   x   D   a   t   e   ,   A   n   n   P\n           7461    2c65    614d    4478    7461    2c65    6e41    506e\n0000040   P   T   ,   M   A   T   ,   M   a   x   A   T   ,   M   i   n\n           5450    4d2c    5441    4d2c    7861    5441    4d2c    6e69\n0000060   A   T   ,   W   e   a   t   h   e   r   S   ,   C   o   m   m\n           5441    572c    6165    6874    7265    2c53    6f43    6d6d\n0000100   e   n   t   s  \\r  \\n   1   ,   *   L   o   c       I   D   ,\n           6e65    7374    0a0d    2c31    4c2a    636f    4920    2c44\n0000120   -   8   8   8   ,   -   8   8   8   ,   -   8   8   8   ,   -\n           382d    3838    2d2c    3838    2c38    382d    3838    2d2c\n0000140   8   8   8   ,   -   8   8   8   ,   -   8   8   8   ,   -   8\n           3838    2c38    382d    3838    2d2c    3838    2c38    382d\n0000160   8   8   ,   -   8   8   8  \\r  \\n   1   ,   1   0   1   0   1\n           3838    2d2c    3838    0d38    310a    312c    3130    3130\n0000200   ,   -   8   8   8   ,   -   8   8   8   ,   -   8   8   8   ,\n           2d2c    3838    2c38    382d    3838    2d2c    3838    2c38\n0000220   -   8   8   8   ,   -   8   8   8   ,   -   8   8   8   ,   -\n           382d    3838    2d2c    3838    2c38    382d    3838    2d2c\n0000240   8   8   8   ,   -   8   8   8  \\r  \\n\n           3838    2c38    382d    3838    0a0d\nCreate custom commands with “alias”\nalias lwc='ls *.jpg | wc -l'\nYou can create a number of custom aliases that are available whenever you login, by putting commands such as the above in your shell start-up file, e.g. .bashrc\nA sampling of more advanced utilities\ngrep search files for text\nsed filter and transform text\nfind advanced search for files/directories\ngrep\nShow all lines containing “bug” in my R scripts\n$ grep bug *.R\nNow count the number of occurrences per file\n$ grep -c bug *.R\nPrint the names of files that contain bug\n$ grep -l bug *.R\n\n\n\n",
      "last_modified": "2021-08-02T22:35:43-07:00"
    },
    {
      "path": "resources.html",
      "title": "Course resources",
      "author": [],
      "contents": "\n\nContents\nMore References\n\nMore References\nReproducible Research with R and RStudio, Chrisotpher Gandrud\n\n\n\n",
      "last_modified": "2021-08-02T22:35:43-07:00"
    },
    {
      "path": "topic_10.html",
      "title": "Topic 10: Inserting tables",
      "author": [],
      "contents": "\n\nContents\nUse the Visual Editor\nOther options\n\n\nTO UPDATE THIS PAGE: Open and edit the topic_10.Rmd file, in the project root, to delete this placeholder text and customize with your own!\n\nUse the Visual Editor\nIf you want to create a table in your R Markdown from scratch that is easily editable (e.g., a table of Assignment due dates or something), it might be easiest to just make the thing manually right in your R Markdown document.\nTo do that, I strongly recommend using the RStudio Visual Editor (in RStudio versions >= 1.4), which has an easy-to-use Table maker similar to what you’d see in Word or Google Docs.\nOpen the .Rmd in which you want to add the table\nSwitch over to the visual editor by clicking on the compass-looking icon in the top right of your .Rmd screen, to the right of the ‘Run’ and ‘Publish’ buttons (hover text is “Switch to visual markdown editor”)\nIn the Visual Editor menu, click on Table, then in the dropdown Menu click ‘Insert Table’…and create & populate your new table like you would normally in non-markdown tools\nOther options\nThere are a bunch of different ways to add & format tables in R Markdown (see several of many options in David Keyes’ post on Making Beautiful Tables in R). I think most of them are most useful when you’re trying to make a finalized table with data in it, but if you really want to beautify your website tables there are options.\n\n\n\n",
      "last_modified": "2021-08-02T22:35:44-07:00"
    },
    {
      "path": "topic_3.html",
      "title": "Topic 3: Adding images",
      "author": [],
      "contents": "\n\nContents\nWhere should I save my images?\nHow do I make images show up on my site?\n\n\nTO UPDATE THIS PAGE: Open and edit the topic_3.Rmd file, in the project root, to delete this placeholder text and customize with your own!\n\nWhere should I save my images?\nDrop images you want to include on your site into the existing img folder within your R Project (or make your own folder for images, set up a subfolder structure, etc.) - as long as you can easily point to them within your project.\nHow do I make images show up on my site?\nThere are a bunch of ways to add images in an R Markdown document (see more examples from the R Markdown Cookbook here).\nI recommend using knitr::include_graphics(\"path_to_image\").\nFor example, if there is an image saved as cool_dogs.jpg in the img folder, then you can add this to your R Markdown document by adding (within a code chunk):\n\n```{r, echo = FALSE}\n  knitr::include_graphics(\"img/cool_dogs.jpg\")\n```\nYou can also update the size of the image, add a caption, etc. by updating the code chunk header, e.g.:\n\n```{r, echo = FALSE, out.width = \"50%\", fig.cap = \"Some cool dogs!\"}\n  knitr::include_graphics(\"img/cool_dogs.jpg\")\n```\nFor example, the image usgs_sat.jpeg is in the img folder of this template. I can have it show up here by include a code chunk that looks like this:\n\n```{r, echo = FALSE, out.width = \"80%\", fig.cap = \"USGS image of Mississippi River.\"}\n  knitr::include_graphics(\"img/usgs_sat.jpeg\")\n```\n\n\n\n",
      "last_modified": "2021-08-02T22:35:44-07:00"
    },
    {
      "path": "topic_4.html",
      "title": "Topic 4: Change the theme",
      "author": [],
      "contents": "\n\nTO UPDATE THIS PAGE: Open and edit the topic_4.Rmd file, in the project root, to delete this placeholder text and customize with your own!\n\nThe bells and whistles of this MEDS template (colors, fonts, spacing, etc.) are customized in the theme.css file in your Project root.\nIf you love css or want to make changes, you’re encouraged to customize your site! There is minor annotation in the css file, but honestly this will probably just take quite a bit of Inspect Element to figure out what to change.\nFonts: If you specifically want to know how to change the site fonts, see here.\n\n\n\n",
      "last_modified": "2021-08-02T22:35:44-07:00"
    },
    {
      "path": "topic_5.html",
      "title": "Topic 5: Basic formatting",
      "author": [],
      "contents": "\n\nTO UPDATE THIS PAGE: Open and edit the topic_5.Rmd file, in the project root, to delete this placeholder text and customize with your own!\n\nIf you’re familiar with markdown, use standard syntax to update font styles, add bulleted lists, subscripts/superscripts, etc. (or learn more from the R Markdown cheatsheet).\nIf you’re not familiar with markdown and want an easier way to update formatting, there is a Visual Editor in RStudio versions > 1.4. It is absolutely worth it to check it out for easier formatting of text, images, tables, citations, and more. Read more about the new RStudio Visual Editor here.\n\n\n\n",
      "last_modified": "2021-08-02T22:35:45-07:00"
    },
    {
      "path": "topic_6.html",
      "title": "Topic 6: Internal & external links",
      "author": [],
      "contents": "\n\nContents\nLinking to internal parts of your site\nExternal links\n\n\nTO UPDATE THIS PAGE: Open and edit the topic_6.Rmd file, in the project root, to delete this placeholder text and customize with your own!\n\nLinking to internal parts of your site\nSometimes you’ll want to have a link to another page in your website. How? Use the format [text](link_to_this_page.html).\nFor example, if I want to link here to the Resources page, within my .Rmd that looks like this:\n  Find more resources [here](resources.html). \nWhich, when built, looks like this:\nFind more resources here.\nExternal links\nSame thing, just add the full URL within the parentheses. For example, to link to UCSB’s home page that would look like:\n  Learn more about [UCSB](https://www.ucsb.edu/).\n  \nWhich when built looks like this:\nLearn more about UCSB.\n\n\n\n",
      "last_modified": "2021-08-02T22:35:45-07:00"
    },
    {
      "path": "topic_8.html",
      "title": "Topic 8: Dropdown list from a navigation bar item",
      "author": [],
      "contents": "\n\nTO UPDATE THIS PAGE: Open and edit the topic_8.Rmd file, in the project root, to delete this placeholder text and customize with your own!\n\nIf you look at this template, you’ll notice that some navigation bar items go directly to a single page, while the Modules item takes you to a dropdown menu.\nTo create a dropdown menu of pages:\nCreate and save the pages as individual R Markdown documents as described here.\nOpen the _site.yml file. In the navbar section, create a menu with the pages as linked items using a structure like this:\n   - text: \"Dropdown menu\"\n      menu:\n        - text: \"First dropdown item\"\n          href: item_1.html\n        - text: \"Second dropdown item\"\n          href: item_2.html\nThe example above would only work if the new pages were created as item_1.Rmd and item_2.Rmd, so that when the site is built the rendered item_1.html and item_2.html files exist in the docs output directory.\n\n\n\n",
      "last_modified": "2021-08-02T22:35:46-07:00"
    },
    {
      "path": "topic_9.html",
      "title": "Topic 9: Changing site fonts",
      "author": [],
      "contents": "\n\nContents\nFonts are imported and specified in theme.css\nUse different fonts\n\n\nTO UPDATE THIS PAGE: Open and edit the topic_9.Rmd file, in the project root, to delete this placeholder text and customize with your own!\n\nYou are welcome to use any fonts you want on your website. Here, only using Google fonts is described (there are other methods for downloading fonts and adding, not included here).\nFonts are imported and specified in theme.css\nIn your Project in RStudio, open the theme.css file.\nNear the top, you’ll see some lines that look like this:\n/* Header font */\n@import url('https://fonts.googleapis.com/css2?family=Sanchez&display=swap');\n\n/* Body font */\n@import url('https://fonts.googleapis.com/css2?family=Nunito+Sans:wght@300;400&display=swap');\n\n/* Code font (Roboto Mono) */\n@import url('https://fonts.googleapis.com/css2?family=Roboto+Mono:wght@300;400&display=swap');\nThose are the import command to get 3 different Google fonts (Sanchez, Nunito Sans, and Roboto Mono). You can explore many different Google fonts here.\nUse different fonts\nFind a Google Font you like.\nClick on the font. To the right of the font example text, you should see an option to ‘+ Select this style’. Click the one(s) you want to select.\nThat will probably bring up a side menu. If you don’t see that side menu, you can see your selected styles at any time by clicking on the top-right menu icon that is a grid with 3 squares and a plus sign - hovering reveals this is to ‘View your selected families’. In the Use on the web section of the side menu that appears, select the radio button for @import. It’ll look weird like this (for the Zen Dots Google Font):\n    <style>\n    @import url('https://fonts.googleapis.com/css2?family=Zen+Dots&display=swap');\n    <\/style> \nCopy everything BETWEEN (but excluding) the ending <style> and <\/style>tags\nPaste the @import line you’ve copied into the top section of theme.css near the other fonts imported there. It is now available for use in your theme.\nUpdate the css with your new fonts, replacing the existing font names with the name you’ve imported. You might want to use a Find & Replace All if you want to make sure you’re updating a font everywhere it appears in the current theme.\nRepeat for as many different fonts as you want to update in your theme.\n\n\n\n",
      "last_modified": "2021-08-02T22:35:46-07:00"
    }
  ],
  "collections": []
}
